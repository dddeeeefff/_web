JSP(Java Server Page)
 - 주석은 자바와 동일하게 사용할 수 있으며, html/css/js 사이에 삽입되어 동작함
 - '<%'부터 '%>'까지 영역을 지정하여 jsp 코드를 삽입함
 - 하나의 jsp파일도 서블릿으로 변환되어 컴파일 되므로 jsp파일 하나가 하나의 자바 클래스를 의미함


1. JSP 지시어(Directive)
 - page, include, taglib 지시어로 3가지가 존재

1) page 지시어
 - jsp 페이지에 대한 각종 속성들을 지정하는 지시어로 한 페이지의 가장 위에 존재해야 함
 - 여러 속성을 가지고 있으며 그 중 import를 제외하면 모든 속성은 페이지당 한 번만 사용가능
 - 속성 별로 따로 페이지 지시어를 사용할 수 있고, 여러 속성을 한 번에 입력할 수도 있음
 	여러 속성을 한 번에 입력할 경우 반드시 각 속성들의 앞에 띄어쓰기가 있어야 함
 - 문법
<%@ page 속성1="값1" 속성2="값2" ... 속성n="값n" %>

- 속성
language="java" : 기본값 java. 스크립트 요소에서 사용할 언어 설정
extends="클래스명" : 기본값 없음. 현재 페이지가 상속받을 클래스를 지정
import='패키지명.클래스명 or *" : 기본값 없음. 현재 페이지에 import할 클래스를 지정
session="true" : 기본값 true. 한 페이지에서 HttpSession 사용여부
buffer="16kb" : 기본값 8kb. 페이지의 출력 버퍼의 크기를 설정(클수록 안정적이나 처음 로딩시 느림)
autoFlush="true" : 기본값 true. 출력 버퍼가 다 찼을 경우 처리(다 차면 전송시킨다는 의미)
isThreadSafe="true" : 기본값 true. 다중 쓰레드의 동시 실행여부로 true를 입력하면 한 쓰레드가 완료될 때 까지 다른 쓰레드를 기다리게 한다는 의미
info="설명" : 기본값 없음. 현재 페이지에 대한 설명으로 주석같은 역할을 함
errorPage="경로 및 에러.jsp" : 기본값 없음. 현재 페이지에서 예외 발생시 처리할 때 필요
isErrorPage="false" : 기본값 false. 현제 페이지를 에러 페이지로 지정하는 속성
contentType="text/html; charset=UTF-8" : JSP로 생성할 문서의 타입을 지정하는 방식
pageEncoding="utf-8" : 기본값 ISO-8859-1. 현재 페이지의 문자 인코딩 설정으로 유니코드인 'utf-8'로 지정

2) include 지시어
 - 현재 페이지에 다른 jsp나 html 파일을 원하는 위치에 삽입하는 지시어
 - 보통은 공용(상단메뉴, 사이즈메뉴, 카피라이트 등)으로 사용하는 파일등을 include하여 사용함
 - 문법
<%@ include file="경로 및 파일명" %>

 - 삽입된 파일들은 별도로 따로 컴파일되어 합쳐지는 것이 아닌 삽입된 파일의 소스 코드 자체가 해당 jsp파일에 복사되어 추가되므로 컴파일은 마지막에 한 번만 이루어짐
 - include 지시어는 중복 사용이 가능하여 원하는 만큼 파일을 삽입할 수 있고, lnclude된느 파일 내에서 다른 파일을 또 include할 수도 있음
 - 해당 페이지나 include된 파일에서 선언한 변수나 인스턴스들도 모두 공유할 수 있음
 단, 선언한 곳보다 위에서는 사용할 수 없음

3) taglib 지시어
 - JSTL(JSP Tag Library)이나 커스텀 태그 등 태그 라이브러리를 JSP에서 사용할 때 접두사를 지정해 주는 지시어
 - uri 속성과 prefix 속성 두 가지로 이루어짐
 - 문법
<%@ taglib uri="해당URI" prefix="접두사" %>


2. JSP 스크립트 요소
 - JSP 페이지에 자바 코드를 삽입하기 위해 사용되는 기능
 - 선언문(Declareation), 스크립틀릿(Scriptlet), 표현식(Expression)으로 나뉨

1) 선언문
 - JSP 페이지에서 멤버변수나 멤버메소드를 선언하기 위해 사용되는 구문
 - 선언문에서 선언한 변수는 멤버변수로 인식되어 페이지의 모든 곳에서 참조가능
 	선언된 위치가 호출 또는 참조되는 위치보다 아래에 있어도 정상적으로 동작함
	include된 파일에서 선언문을 이용해 선언해도 상관없이 멤버변수로 사용가능
	다만 보통 선언 및 정의나 초기화 등은 파일 상단에서 처리하는 것이 보기 좋음
 - 문법
<%!
멤버변수나 메소드를 선언 및 정의하는 영역
%>

2) 스크립틀릿
 - 서블릿에서 html등의 코딩이 어려워서 개발된 방식으로 html 태그들 사이에서 사용할 수 있으며 원하는 위치 어디에서든 사용가능
 - 선언문과 다르게 스크립틀릿에서 선언한 변수는 선언한 곳 아래에서만 사용가능
 - 문법
<%
자바코드
%>

3) 표현식
 - 변수나 메소드의 리턴값 또는 수식을 브라우저에 출력하기 위해 사용하는 구문
 - 하나의 표현식 태그 내의 구문 전체가 하나의 print() 메소드의 인수로 들어감
 - 표현식 내부에서는 세미콜론을 사용하면 안됨
 - 문법
<%=변수 or 메소드리턴값 or 수식 등의 출력할 값 %>
 - 출력할 값이 하나일 경우 <% out.println(출력할 값); %>을 사용하는 것보다 간편하게 출력시킬 수 있음