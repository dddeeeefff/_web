웹프로그래밍
 - 웹 서버에서 동작하는 프로그램으로 사용자에게 원하는 페이지를 생성하여 응답해 주는 기능
 	페이지 : 사용자에게 보여줄 HTML 문서를 의미(css, js, 이미지, 동영상 등을 포함)
 - 웹프로그래밍 언어
 	컴파일 언어 : JSP, ASP.Net
	인터프리터 언어 : PHP, ASP


CGI (Common Gateway Interface)
 - 응용프로그램과 웹 서버 사이에 정보를 주고 받는 방식이나 규약들을 정의해 놓은 것
 - 단순한 HTML 만으로는 동적인 웹 페이지 구성이 어렵기 때문에 서버측에서 동적인 데이터를 처리해 클라이언트에 HTML 문서로 전송해 줄 수 있는 응용 프로그램(웹 프로그램)의 필요성으로 나타남
 - 초창기에는 C나 Perl 같은 언어로 작업했으나 DB 연결이 불편하고 비효율적(메모리 낭비가 심함)이며, 익히기가 어려워 좀 더 쉽고 강력한 기능을 가진 ASP, PHP, JSP 등이 나오게 됨


JSP (Java Server Page)
 - 초창기에는 서블릿(Servlet)이라는 기술로 웹 작업을 하였으나, 자바가 기반이므로 철저히 객체지향적이며 플랫폼 독립적인 자바의 장점을 그대로 웹에서 구현할 수 있고, 쓰레드 기반의 요정 처리 방식을 사용했기에 사용자가 많을 수록 효율적으로 동작할 수 있었음
 - 단, 서블릿만으로 웹 작업을 하기에는 자바에 대한 많은 지식이 필요했으며, 화면 인터페이스(html+css+js) 구현에 너무 많은 코드가 필요해 비효율적이고, 익히기 어려운 언어로 인식됨
 - 그래서 인터페이스 구현이 쉬운 ASP의 장점을 수용하여 JSP라는 보다 효과적인 기술을 개발함
 - JSP는 인터페이스 구현이 쉽고, 서블릿과 함께 구동할 수 있으며 서블릿의 기능을 그대로 사용할 수도 있음
 	자바빈즈(JavaBeans) 같은 기술로 보다 강력한 객체지향적 지원이 가능함


자바 웹프로그래밍의 특징
1. JSP (Java Server Page)
 - 화면에 보여지는 부분에 대해 쉽게 작업할 수 있도록 만들어진 기능
 - 서블릿이나 일반 자바파일과는 다르게 확장자가 .jsp로 이루어져 있고, 문서의 중간에 html, css, js 등의 코드를 삽입할 수 있음
 	정확하게는 html 문서안에 자바코드를 입력하는 방식으로 ASP, PHP와 동일한 방식
 - 일반적으로 디자인 관련 작업에서 많이 사용됨
 - JSP로 작업한 파일도 원래 서블릿으로 변환되어 컴파일 후 실행됨
 	jsp로 작업한 파일은 E:\cks\web\work\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\basic\org\apache\jsp 의 위치에 .java 파일로 변환되고 컴파일까지 되어 있음

2. 서블릿(Servlet : Server Side Applet으로 서버쪽 자바 응용 프로그램)
 - 웹 서버 쪽에서 사용자의 요구에 따라 자동으로 생성된 HTML 형식의 페이지를 전송해 줄 수 있는 여러 기술들 중 자바 진영의 기술을 서블릿이라고 함
 	사용자의 요구(request)에 따라 응답(response)을 하는 형태로 동작함
 - 간단하게 생각하면 웹 서버상에서 실행되는 자바의 클래스 파일이라고 할 수 있음
 - 작업후 .java 파일로 저장되며, 컴파일 후 실행됨
 - 디자인 관련 작업에서 html 등의 작업시간이 너무 많이 걸린다는 단점으로 인해 JSP가 나옴

3. MVC 패턴
 - 모델2 라고도 불리우는 MVC(Model View Controller) 패턴을 사용하여 사용자에게 보여지는 화면인 View 부분과 실제 비즈니스 로직이 들어가는 Model 부분, 그리고 View와 Model을 연결시켜주는 Controller 부분으로 나누어 개발됨
 - MVC 패턴은 JSP(View)와 자바빈즈(Model), 그리고 서블릿(Controller)을 이용하여 구현함


클라이언트가 서버로 데이터를 전송하는 방식
1. get 방식
 - url의 뒤에 '?'를 붙인 후 원하는 이름으로 지정하여 값을 보내는 방식
 	예) 도메인.com/test.jsp?변수명1=값1&변수명2=값2&...&변수명n=값n
 - '?'뒤의 문자열을 쿼리스트링이라 하며 
 - 브라우저의 주소창에서 직접 url을 입력하거나, a 태그 등의 링크를 통해 이동할 경우(쿼리스트링이 없어도)에도 get방식으로 취급함
 	form태그의 method 속성값을 get으로 지정해도 get방식으로 전송하게 됨
 - 장점 : 사용이 간편하고, 속도가 빠름
 - 단점 : 보안에 취약하며, 많은 양의 데이터를 보낼 수 없고, 파일 업로드 등의 이진 데이터를 보낼 수 없음

2. post 방식
 - form태그의 method 속성값을 post로 지정하여 폼 안의 컨트롤들을 값을 서버로 보내는 방식
 - 장점 : 보안에 강하며, 많은 양의 데이터나 파일 등의 이진 데이터도 보낼 수 있음
 - 단점 : 반드시 form 태그를 이용해야 하며, 속도가 비교적 느림


클라이언트가 서버로 전송한 데이터를 받는 방법
1. 클라이언트가 보낸 데이터는 무조건 String으로 받아짐
 - 보내는 데이터가 한글이나 다른 영문이 아닌 글자가 있으면 글자가 깨지므로 받기 전에 데이터가 들어있는 request 객체의 문자형 인코딩을 반드시 유니코드로 지정해야 함
 	request.setCharacterEncoding("utf-8");
	// 사용자가 보낸 요청(request)의 글자들(character)의 인코딩(Encoding)을 유니코드(utf-8)로 지정(set)하는 메소드 발생
	// 데이터를 받는 모든 파일이나 메소드의 가장 윗쪽에서 먼저 지정해야 함
 
 - 받은 데이터들 중 경우에 따라 기본 자료형(주로 int)으로 변환하여 사용하기도 함
 	예1) Integer.parseInt(데이터);	// 데이터를 int형으로 변환
	예2) Integer.valueOf(데이터);		// 데이터를 Integer형 인스턴스로 리턴
	// 둘 다 static 메소드이므로 인스턴스 생성없이 바로 사용할 수 있음

 - 서블릿에서는 get방식으로 보낸 데이터는 doGet() 메소드에서, post방식으로 보낸 데이터는 doPost() 메소드에서 받아야 하지만 JSP에서는 두 방식의 구분없이 받을 수 있음

 - 존재하지 않는 컨트롤의 값을 받으려고 하면 null이 들어감

2. 클라이언트가 보낸 데이터를 받는 방법
 - 하나의 이름으로 하나의 데이터를 보냈을 경우
 	String 변수명 = request.getParameter("컨트롤명");

 - 하나의 이름으로 여러 개의 데이터를 보냈을 경우 : 대부분 체크박스의 경우가 많음
 	String[] 배열명 = request.getParameterValues("컨트롤명");
	// 여러 개의 컨트롤을 동일한 이름(name)으로 지정할 경우 받을 때 하나의 배열로 받을 수 있음
