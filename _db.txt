DB(MySQL)와 자바의의 연동
 - MySQL이 설치되어 있는 위치로 가서 'C:\Program Files (x86)\MySQL\Connector J 8.0' 폴더 안에 있는 'mysql-connector-j-8.0.31.jar' 파일을 '프로젝트 폴더/WebContent/WEB-INF/lib' 폴더에 복사

 - 커넥터 버전 5.1x 이하
driver = "com.mysql.jdbc.Driver";
url = "jdbc:mysql://localhost:3306/DB명";

 - 커넥터 버전 6.1x 이상
driver = "com.mysql.cj.jdbc.Driver";
url = "jdbc:mysql://localhost:3306/DB명?useUnicode=true&characterEncoding=UTF8&verifyServerCertificate=false&useSSL=false&serverTimezone=UTC";

 - localhost는 같은 컴퓨터 내에 웹서버와 DB서버가 있다는 의미로 사용한 것이며, DB서버가 물리적으로 다른 곳에 있을 경우 localhost 대신 DB서버의 IP주소를 입력하면 됨
 	3306은 MySQL의 포트번호로 설치시 다른 번호로 지정했을 경우 그 번호를 사용하면 됨

 - DB관련 객체 및 메소드 사용시 무조건 예외처리(try-catch문 사용)를 해야 함
 	대부분의 DB관련 메소드는 throws SQLException 으로 선언되어 있기 때문

 - DB관련 객체를 사용한 후에는 반드시 close() 메소드를 이용하여 사용한 객체를 닫아야 함
 	그러므로 close() 메소드는 try-catch문의 finally 영역에서 닫는 경우가 많음


1. java.sql.Statement 인터페이스
 - db에 쿼리문을 전달 해주는 객체로 Connection 객체가 열어놓은 통로를 통해 쿼리로 전달함
 - 주요 메소드
리턴타입			메소드명 몇 설명
void			close() : Statement 객체를 닫음
ResultSet		executeQuery(String sql) : 쿼리문들 중 select문을 처리하는 메소드
 - select 쿼리의 결과를 table 형식의 ResultSet 객체에 담아 리턴하는 메소드
int				executeUpdate(String sql) : insert, update, delete 쿼리를 실행
 - 리턴값은 쿼리 처리 결과로 각각 입력, 수정, 삭제된 레코드의 개수를 리턴


2. java.sql.PreparedStatement 인터페이스
 - Statement 인터페이스를 상속받아 사용하는 인터페이스
 - Statement 인터페이스와 동일하게 쿼리를 DB에 전달하는 작업을 함
 	단, Statement 인터페이스와 다르게 값을 파라미터 형태로 전달함
	파라미터들의 인덱스 번호는 0이 아닌 1부터 시작
	파라미터의 값은 set자료형() 메소드를 이용하여 설정함
 - Statement 인터페이스보다 반복적인 작업을 할 경우 좀 더 편하고, 지정할 값이 많을 수록 (insert) 편함
 - 주요 메소드는 Statement 인터페이스와 동일


3. java.sql.CallableStatement 인터페이스
 - preparedStatement 인터페이스를 상속받아 사용하는 인터페이스
 - DB의 stored procedure를 실행시키는 Statement 객체
 - 사용법은 preparedStatement와 같이 파라미터 전달방법으로 실행함


4. java.sql.ResultSet 인터페이스
 - 쿼리들 중 select 쿼리에 대한 결과를 받아오는 객체
 - table(표) 모양으로 받아오며 컬럼명 또는 인덱스 번호를 이용하여 받아온 데이터 하나 하나에 접근할 수 있음
 - 주요 메소드
리턴타입		메소드명 및 설명
void		close() : Statement 객체를 닫음
해당 자료형	get자료형(int columnIndex) : ResultSet에서 columnIndex에 해당하는 컬럼의 값을 해당 자료형으로 리턴(columnIndex는 0이 아닌 1부터 시작함)
해당 자료형	get자료형(String columnName) : ResultSet에서 columnName에 해당하는 컬럼의 값을 해당 자료형으로 리턴(자주사용)

 - 자료형 : int, double, String 등의 자바 자료형이며, getInt(), getString 등의 메소드명으로 사용함

boolean		next() : ResultSet의 다음 행(레코드)으로 커서를 내림
 - 다음 행에 데이터가 있으면 true를, 없으면 false를 리턴(루프의 조건)
 - ResultSet을 사용하면 무조건 최소 한 번은 사용해야 하는 메소드
 - ResultSet에서 커서의 위치를 한 줄 내리고, 그 줄에 데이터가 있는지 여부와 그 데이터에 접근하게 해주는 메소드

4-1. java.sql.ResultSetMetaData 인터페이스
 - ResultSet으로 받아온 레코드들을 메타 정보(컬럼 개수, 컬럼 명, 컬럼 데이터 타입 등)를 제공해주는 객제
- 주요 메소드
리턴타입	메소드명 및 설명
int		getColumnCount() : ResultSet에 저장되어 있는 컬럼의 개수를 리턴
String	getColumnLabel(int columnIndex) : 해당 인덱스의 컬럼 레이블을 리턴
String	getColumnName(int columnIndex) : 해당 인덱스의 컬럼 이름을 리턴
String	getColumnTypeName(int columnIndex) : 해당 인덱스의 컬럼 자료형을 리턴

4-2. ResultSet에서 커서 자유롭게 움직이기
 - 기본적으로 ResultSet은 생성한 우 커서가 전진(next() 메소드)만 가능하게 설정되어 있음
 - 단, Statement 생성시 매개변수로 Resultset의 특정 상수를 사용하면 커서의 자유로운 이동이 가능해 짐(사용빈도는 낮음)
 - 상수(클래스 멤버)
주요 메소드
리턴타입	메소드명 및 설명
int		getColumnCount() : ResultSet에 저장되어 있는 컬럼의 개수를 리턴
String	getColumnLabel(int columnIndex) : 해당 인덱스의 컬럼 레이블을 리턴
String	getColumnName(int columnIndex) : 해당 인덱스의 컬럼 이름을 리턴
String	getColumnTypeName(int columnIndex) : 해당 인덱스의 컬럼 자료형을 리턴
static int CONCUR_READ_ONLY : 데이터 변경 불가능(기본값)
static int CONCUR_UPDATABLE : 데이터 변경 가능
// ResultSet 안에 있는 데이터들의 수정 가능 여부를 지정하는 상수값

static int TYPE_FORWARD_ONLY : 다음 레코드로만 이동 가능(기본값)
static int TYPE_SCROLL_INSENSITIVE : 커서 이동이 자유롭고 업데이트 내용을 반영함
static int TYPE_SCROLL_SENSITIVE : 커서 이동이 자유롭고 업데이트 내용을 반영 안함
// CONCUR_UPDATABLE로 지정한 상태에서 ResultSet 안에 있는 데이터들을 수정한 후 그 결과를 DB에 적용할지를 지정
// 단, 실제로 DB의 값을 변경하는 형태로 ResultSet을 사용하는 경우는 거의 없음(속도가 매우 느려질 수 있음)

 - 주요 메소드(ResultSet의 메소드들로 특정 상수 사용시에만 사용가능한 메소드들)
리턴타입	메소드명 및 설명
boolean	absolute(int row) : 지정한 row행으로 커서를 이동시킴
void	afterLast() : 커서를 마지막 레코드의 다음(EOF, 레코드가 아님)으로 이동 - ResultSet의 끝
void	beforeFirst() : 커서를 첫 레코드의 이전(BOF, 레코드가 아님)으로 이동 - ResultSet의 시작
boolean	first() : 커서를 첫 레코드로 이동
boolean	last() : 커서를 마지막 레코드로 이동
boolean	next() : 커서를 다음 레코드로 이동
boolean	previous() : 커서를 이전 레코드로 이동


5. 트랜잭션(Transaction) 사용
 - Connection 객체의 기능으로 여러 개의 쿼리를 실행했을 때  모든 쿼리가 정상적으로 동작되는지 여부를 감시한 후 여러 개의 쿼리들 중 하나라도 오류가 발생하면 모든 쿼리의 실행을 취소(rollback)시켜 원상태로 복귀시키는 기능
 - 여러 개의 쿼리가 한 번에 실행되는 기능에서는 트랜잭션의 사용을 고려해 봐야 하며, 특히 결제관련 기능이나 보안 관련 기능에서는 거의 필수적으로 사용해야 함
 - 쿼리의 적용 시점이 여러 쿼리 실행 후 이므로 속도가 느리다는 단점이 있어 꼭 필요한 부분에만 작업해야 함

 - 주요 메소드(Connection 객체의 메소드들)
리턴타입	메소드명 및 설명
void	commit() : 트랜잭션 시작 후 실행시켰던 쿼리들의 결과들을 모두 DB에 적용시키는 메소드
void	rollback() : 트랜잭션 시작 후 실행시켰던 쿼리들의 결과들을 모두 취소시키는 메소드(실행 이전 상태로 복귀)
void	setAutoCommit(boolean autoCommit)
 : 자동으로 모든 쿼리의 결과를 commit 시킬것인지 여부를 지정하는 메소드로 기본값은 true
 : 기본적으로 모든 쿼리는 실행 후 바로 적용되며, 트랜잭션을 사용하려면 false로 지정해야 함
 : 트랜잭션의 시작으로 setAutoCommit(false)를 실행하고, setAutoCommit(true)로 종료됨
